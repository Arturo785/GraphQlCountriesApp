package com.plcoding.graphqlcountriesapp.data

import com.apollographql.apollo3.ApolloClient
import com.plcoding.CountriesQuery
import com.plcoding.CountryQuery
import com.plcoding.graphqlcountriesapp.domain.CountryClient
import com.plcoding.graphqlcountriesapp.domain.DetailedCountry
import com.plcoding.graphqlcountriesapp.domain.SimpleCountry


// the impl of our domain client
class ApolloCountryClient(
    private val apolloClient: ApolloClient // this client is retrieved from DI
) : CountryClient {

    override suspend fun getCountries(): List<SimpleCountry> {
        return apolloClient
            .query(CountriesQuery()) // generated by graphQL
            .execute()
            .data
            ?.countries
            ?.map { it.toSimpleCountry() } // our mapper
            ?: emptyList()
    }

    override suspend fun getCountry(code: String): DetailedCountry? {
        return apolloClient
            .query(CountryQuery(code)) // generated by graphQL
            .execute()
            .data
            ?.country
            ?.toDetailedCountry() // our mapper
    }
}